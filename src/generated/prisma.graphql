# source: https://us1.prisma.sh/justin-yum-a90f29/bowling-service/dev
# timestamp: Wed Dec 19 2018 19:39:02 GMT-0800 (Pacific Standard Time)

type AggregateFrame {
  count: Int!
}

type AggregateGame {
  count: Int!
}

type AggregateRoll {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Frame {
  rolls(where: RollWhereInput, orderBy: RollOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Roll!]
  frameScore: Int!
}

"""A connection to a list of items."""
type FrameConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FrameEdge]!
  aggregate: AggregateFrame!
}

input FrameCreateInput {
  frameScore: Int!
  rolls: RollCreateManyInput
}

input FrameCreateManyInput {
  create: [FrameCreateInput!]
}

"""An edge in a connection."""
type FrameEdge {
  """The item at the end of the edge."""
  node: Frame!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FrameOrderByInput {
  frameScore_ASC
  frameScore_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type FramePreviousValues {
  frameScore: Int!
}

input FrameScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [FrameScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [FrameScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FrameScalarWhereInput!]
  frameScore: Int

  """All values that are not equal to given value."""
  frameScore_not: Int

  """All values that are contained in given list."""
  frameScore_in: [Int!]

  """All values that are not contained in given list."""
  frameScore_not_in: [Int!]

  """All values less than the given value."""
  frameScore_lt: Int

  """All values less than or equal the given value."""
  frameScore_lte: Int

  """All values greater than the given value."""
  frameScore_gt: Int

  """All values greater than or equal the given value."""
  frameScore_gte: Int
}

type FrameSubscriptionPayload {
  mutation: MutationType!
  node: Frame
  updatedFields: [String!]
  previousValues: FramePreviousValues
}

input FrameSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FrameSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FrameSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FrameSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FrameWhereInput
}

input FrameUpdateManyDataInput {
  frameScore: Int
}

input FrameUpdateManyInput {
  create: [FrameCreateInput!]
  updateMany: [FrameUpdateManyWithWhereNestedInput!]
  deleteMany: [FrameScalarWhereInput!]
}

input FrameUpdateManyMutationInput {
  frameScore: Int
}

input FrameUpdateManyWithWhereNestedInput {
  where: FrameScalarWhereInput!
  data: FrameUpdateManyDataInput!
}

input FrameWhereInput {
  """Logical AND on all given filters."""
  AND: [FrameWhereInput!]

  """Logical OR on all given filters."""
  OR: [FrameWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FrameWhereInput!]
  frameScore: Int

  """All values that are not equal to given value."""
  frameScore_not: Int

  """All values that are contained in given list."""
  frameScore_in: [Int!]

  """All values that are not contained in given list."""
  frameScore_not_in: [Int!]

  """All values less than the given value."""
  frameScore_lt: Int

  """All values less than or equal the given value."""
  frameScore_lte: Int

  """All values greater than the given value."""
  frameScore_gt: Int

  """All values greater than or equal the given value."""
  frameScore_gte: Int
  rolls_every: RollWhereInput
  rolls_some: RollWhereInput
  rolls_none: RollWhereInput
}

type Game implements Node {
  id: ID!
  frames(where: FrameWhereInput, orderBy: FrameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Frame!]
}

"""A connection to a list of items."""
type GameConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GameEdge]!
  aggregate: AggregateGame!
}

input GameCreateInput {
  frames: FrameCreateManyInput
}

"""An edge in a connection."""
type GameEdge {
  """The item at the end of the edge."""
  node: Game!

  """A cursor for use in pagination."""
  cursor: String!
}

enum GameOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type GamePreviousValues {
  id: ID!
}

type GameSubscriptionPayload {
  mutation: MutationType!
  node: Game
  updatedFields: [String!]
  previousValues: GamePreviousValues
}

input GameSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [GameSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [GameSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GameSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GameWhereInput
}

input GameUpdateInput {
  frames: FrameUpdateManyInput
}

input GameWhereInput {
  """Logical AND on all given filters."""
  AND: [GameWhereInput!]

  """Logical OR on all given filters."""
  OR: [GameWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GameWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  frames_every: FrameWhereInput
  frames_some: FrameWhereInput
  frames_none: FrameWhereInput
}

input GameWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createGame(data: GameCreateInput!): Game!
  createFrame(data: FrameCreateInput!): Frame!
  createRoll(data: RollCreateInput!): Roll!
  updateGame(data: GameUpdateInput!, where: GameWhereUniqueInput!): Game
  deleteGame(where: GameWhereUniqueInput!): Game
  upsertGame(where: GameWhereUniqueInput!, create: GameCreateInput!, update: GameUpdateInput!): Game!
  updateManyFrames(data: FrameUpdateManyMutationInput!, where: FrameWhereInput): BatchPayload!
  updateManyRolls(data: RollUpdateManyMutationInput!, where: RollWhereInput): BatchPayload!
  deleteManyGames(where: GameWhereInput): BatchPayload!
  deleteManyFrames(where: FrameWhereInput): BatchPayload!
  deleteManyRolls(where: RollWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  games(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Game]!
  frames(where: FrameWhereInput, orderBy: FrameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Frame]!
  rolls(where: RollWhereInput, orderBy: RollOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Roll]!
  game(where: GameWhereUniqueInput!): Game
  gamesConnection(where: GameWhereInput, orderBy: GameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GameConnection!
  framesConnection(where: FrameWhereInput, orderBy: FrameOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FrameConnection!
  rollsConnection(where: RollWhereInput, orderBy: RollOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RollConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Roll {
  score: Int!
}

"""A connection to a list of items."""
type RollConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RollEdge]!
  aggregate: AggregateRoll!
}

input RollCreateInput {
  score: Int!
}

input RollCreateManyInput {
  create: [RollCreateInput!]
}

"""An edge in a connection."""
type RollEdge {
  """The item at the end of the edge."""
  node: Roll!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RollOrderByInput {
  score_ASC
  score_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type RollPreviousValues {
  score: Int!
}

type RollSubscriptionPayload {
  mutation: MutationType!
  node: Roll
  updatedFields: [String!]
  previousValues: RollPreviousValues
}

input RollSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RollSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RollSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RollSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RollWhereInput
}

input RollUpdateManyMutationInput {
  score: Int
}

input RollWhereInput {
  """Logical AND on all given filters."""
  AND: [RollWhereInput!]

  """Logical OR on all given filters."""
  OR: [RollWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RollWhereInput!]
  score: Int

  """All values that are not equal to given value."""
  score_not: Int

  """All values that are contained in given list."""
  score_in: [Int!]

  """All values that are not contained in given list."""
  score_not_in: [Int!]

  """All values less than the given value."""
  score_lt: Int

  """All values less than or equal the given value."""
  score_lte: Int

  """All values greater than the given value."""
  score_gt: Int

  """All values greater than or equal the given value."""
  score_gte: Int
}

type Subscription {
  game(where: GameSubscriptionWhereInput): GameSubscriptionPayload
  frame(where: FrameSubscriptionWhereInput): FrameSubscriptionPayload
  roll(where: RollSubscriptionWhereInput): RollSubscriptionPayload
}
